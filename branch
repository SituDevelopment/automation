#!/usr/bin/bash
#
#
# Creates a new development branch for a GitHub issue.
# If the VS Code command: `code` is available, the project will be opened in VS Code.
#
#
# Usage:
#   branch [-r] [-o <owner>] [-b <base-branch>] [-d <dev-branch>] <repository> <issue-number>
#   branch -h
#
# Options:
#   -r                    Reuse the current VS Code window.
#
#   -o <owner>            Owner of the repository.
#                         Defaults to "SituDevelopment".
#
#   -b <base-branch>      Name of the branch from which to take the new branch.
#                         Defaults to the repository's default branch.
#
#   -d <dev-branch>       Name of the new branch to create.
#                         Defaults to being auto-generated by the issue number and title.
#
#   <repository>          Name of the repository.
#
#   <issue-number>        Number of the issue for which the development branch is being created.
#
#   -h                    Display help and exit.
#
#
# Exit codes:
#   0 - success
#   1 - incorrect usage
#   2 - GitHub error
#   3 - git error
#   4 - VS Code error


# exit codes
SUCCESS=0
INCORRECT_USAGE=1
GITHUB_ERROR=2
GIT_ERROR=3
VS_CODE_ERROR=4


#######################################
# Display help message.
# Arguments:
#   None
# Outputs:
#   Writes help message to stdout
#######################################
showhelp() {
cat << EOF
Usage:
  branch [-r] [-o <owner>] [-b <base-branch>] [-d <dev-branch>] <repository> <issue-number>
  branch -h

Creates a new development branch for a GitHub issue.


Options:
  -r                    Reuse the current VS Code window.

  -o <owner>            Owner of the repository.
                        Defaults to "SituDevelopment".

  -b <base-branch>      Name of the branch from which to take the new branch.
                        Defaults to the repository's default branch.

  -d <dev-branch>       Name of the new branch to create.
                        Defaults to being auto-generated by the issue number and title.

  <repository>          Name of the repository.

  <issue-number>        Number of the issue for which the development branch is being created.

  -h                    Display help and exit.
EOF
}


#######################################
# Asserts the given command runs successfully.
# Arguments:
#   $1 - message to print before running command
#   $2 - command to run
#   $3 - error message to print on failure
#   $4 - exit code to use on failure
#   $5 - success message to print on success
# Outputs:
#   Writes error message to stdout
#######################################
assert_success() {
    echo $1
    eval $2
    if [[ $? -ne 0 ]]; then
        echo "$3"
        echo -e "\nGoodbye..."
        exit $4
    fi
    echo -e $5
}


# assign repository and branch variables according to given arguments
while getopts ": r o: b: d: h" flag; do
    case "${flag}" in
        r) reuse=" --reuse-window" ;;
        o) owner="${OPTARG}" ;;
        b) base="${OPTARG}" ;;
        d) dev="--name ${OPTARG}" ;;
        h) showhelp; exit ${SUCCESS} ;;
        ?) showhelp; exit ${INCORRECT_USAGE} ;;
    esac
done

shift $((${OPTIND} - 1))
if [[ $# -ne 2 ]]; then
    showhelp
    exit ${INCORRECT_USAGE}
fi

repo=$1
issue=$2

# set default values for unset variables
reuse=${reuse:=""}
owner=${owner:="SituDevelopment"}
base=${base:=$(gh api /repos/${owner}/${repo}/branches?protected=true --jq '.[0].name')}
dev=${dev:=""}


# commands predefined to ensure shell expansion works correctly
branch_command="gh issue develop '${issue}' --base '${base}' ${dev}"
replacement_command="sed -e s|github.com/${owner}/${repo}/tree/||g"

assert_success "Creating development branch..." \
               "branch=$(eval ${branch_command} | ${replacement_command})" \
               "Error creating development branch" \
               "${GITHUB_ERROR}" \
                "Created development branch\n"

assert_success "Cloning repository..." \
               "git clone git@github.com:${owner}/${repo} --branch '${branch}' '/var/www/development/${repo}-${branch}'" \
               "Error cloning repository" \
               ${GIT_ERROR} \
               "Cloned repository\n"

assert_success "Checking for VS Code command..." \
               "which code" \
               "VS Code command not found" \
               ${SUCCESS} \
               "VS Code command found\n"


assert_success "Opening project in VS Code..." \
               "code${reuse} '/var/www/development/${repo}-${branch}'" \
               "Error opening project in VS Code" \
               ${VS_CODE_ERROR} \
               "Opened project in VS Code\n"


exit ${SUCCESS}
