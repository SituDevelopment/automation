#!/usr/bin/env bash
#
#
# Creates a new development branch for a GitHub issue.
# If the VS Code command: `code` is available, the project will be opened in VS Code.
#
#
# Usage:
#   branch [-r] [-o <owner>] [-b <base-branch>] [-d <dev-branch>] <repository> <issue-number>
#   branch [-r] [-o <owner>] [-b <base-branch>] -d <dev-branch> <repository> --no-issue
#   branch -h
#
# Options:
#   -r                    Reuse the current VS Code window.
#
#   -o <owner>            Owner of the repository.
#                         Defaults to "SituDevelopment".
#
#   -b <base-branch>      Name of the branch from which to take the new branch.
#                         Defaults to the repository's default branch.
#
#   -d <dev-branch>       Name of the new branch to create.
#                         Defaults to being auto-generated by the issue number and title.
#                         If `--no-issue` is specified, `dev-branch` is required.
#
#   <repository>          Name of the repository.
#
#   <issue-number>        Number of the issue for which the development branch is being created.
#
#   --no-issue            Create a development branch without an issue.
#
#   -h                    Display help and exit.
#
#
# Exit codes:
#   0 - success
#   1 - incorrect usage
#   2 - GitHub error
#   3 - git error
#   4 - VS Code error


# exit codes
SUCCESS=0
INCORRECT_USAGE=1
GITHUB_ERROR=2
GIT_ERROR=3
VS_CODE_ERROR=4


#######################################
# Display help message.
# Arguments:
#   None
# Outputs:
#   Writes help message to stdout
#######################################
showhelp() {
cat << EOF
Usage:
  branch [-r] [-o <owner>] [-b <base-branch>] [-d <dev-branch>] <repository> <issue-number>
  branch [-r] [-o <owner>] [-b <base-branch>] -d <dev-branch> <repository> --no-issue
  branch -h

Creates a new development branch for a GitHub issue.


Options:
  -r                    Reuse the current VS Code window.

  -o <owner>            Owner of the repository.
                        Defaults to "SituDevelopment".

  -b <base-branch>      Name of the branch from which to take the new branch.
                        Defaults to the repository's default branch.

  -d <dev-branch>       Name of the new branch to create.
                        Defaults to being auto-generated by the issue number and title.
                        If \`--no-issue\` is specified, \`dev-branch\` is required.

  <repository>          Name of the repository.

  <issue-number>        Number of the issue for which the development branch is being created.

  --no-issue            Create a development branch without an issue.

  -h                    Display help and exit.
EOF
}


#######################################
# Asserts the given command runs successfully.
# Arguments:
#   $1 - message to print before running command
#   $2 - command to run
#   $3 - error message to print on failure
#   $4 - exit code to use on failure
#   $5 - success message to print on success
# Outputs:
#   Writes error message to stdout
#######################################
assert_success() {
    echo $1
    eval $2
    if [[ $? -ne 0 ]]; then
        echo "$3"
        echo -e "\nGoodbye..."
        exit $4
    fi
    echo -e $5
}


# assign repository and branch variables according to given arguments
while getopts ": r o: b: d: h" flag; do
    case "${flag}" in
        r) reuse=" --reuse-window" ;;
        o) owner="${OPTARG}" ;;
        b) base="${OPTARG}" ;;
        d) branch="${OPTARG}" ;;
        h) showhelp; exit ${SUCCESS} ;;
        ?) showhelp; exit ${INCORRECT_USAGE} ;;
    esac
done

shift $((${OPTIND} - 1))
if [[ $# -ne 2 ]]; then
    showhelp
    exit ${INCORRECT_USAGE}
fi

repo=$1
issue=$2

# set default values for unset variables
reuse=${reuse:=""}
owner=${owner:="SituDevelopment"}
base=${base:=$(bkt --discard-failures -- gh api /repos/${owner}/${repo}/branches?protected=true --jq '.[0].name')}
branch=${branch:=""}

# if not provided, construct branch name
if [[ -z "${branch}" ]]; then
    if [[ "${issue}" == "--no-issue" ]]; then
        showhelp
        exit ${INCORRECT_USAGE}
    fi

    assert_success "Looking for issue..." \
                   "gh issue view ${issue} --json '' &> /dev/null" \
                   "Issue not found" \
                   ${INCORRECT_USAGE} \
                   "Issue found\n"

    branch=$(gh issue view ${issue} --json title --jq '.title')
    branch=$(echo ${branch} | sed -e 's| |-|g')              # convert to kebab-case
    branch=$(echo ${branch} | sed -e 's|[^a-zA-Z0-9-]||g')   # remove non-kebab-case characters
    branch=$(echo ${branch} | sed -E 's|[A-Z][a-z]+|\L&|g')  # convert non-initialisms to lowercase

    prefixes=(bug chore feature)
    issue_labels=$(gh issue view ${issue} --json labels --jq '.labels[].name')
    for prefix in "${prefixes[@]}"; do
        if [[ $issue_labels == *"${prefix}"* ]]; then
            branch="${prefix}/${branch}"
            break
        fi
    done
fi

directory="/var/www/development/${repo}-${branch/\//-}"

if [[ "${issue}" == "--no-issue" ]]; then
    assert_success "Cloning repository..." \
                   "git clone git@github.com:${owner}/${repo} --branch '${base}' '${directory}'" \
                   "Error cloning repository" \
                   ${GIT_ERROR} \
                   "Cloned repository\n"

    cd "${directory}"

    assert_success "Creating development branch..." \
                   "git switch --create '${branch}'" \
                   "Error creating development branch" \
                   ${GIT_ERROR} \
                   "Created development branch\n"

    assert_success "Publishing development branch to remote repository..." \
                   "git push --set-upstream origin '${branch}'" \
                   "Error publishing development branch to remote repository" \
                   ${GIT_ERROR} \
                   "Published development branch to remote repository\n"
else
    assert_success "Creating development branch..." \
                   "gh issue develop '${issue}' --base '${base}' --name '${branch}'" \
                   "Error creating development branch" \
                   ${GITHUB_ERROR} \
                   "Created development branch\n"

    assert_success "Cloning repository..." \
                   "git clone git@github.com:${owner}/${repo} --branch '${branch}' '${directory}'" \
                   "Error cloning repository" \
                   ${GIT_ERROR} \
                   "Cloned repository\n"
fi


assert_success "Checking for VS Code command..." \
               "which code" \
               "VS Code command not found" \
               ${SUCCESS} \
               "VS Code command found\n"


assert_success "Opening project in VS Code..." \
               "code ${reuse} '${directory}'" \
               "Error opening project in VS Code" \
               ${VS_CODE_ERROR} \
               "Opened project in VS Code\n"


exit ${SUCCESS}
