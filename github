#!/usr/bin/bash
#
#
# Creates a new GitHub repository with test and production branches and clones
# the branches locally.
#
# See /usr/bin/prod.sh
#
#
# Usage: github [-o <owner>] [-r <repository>] [-d <description>] [-v <visibility>]
#               [-t <test-directory>] [-p <prod-directory>] [-h]
#
# Options:
#   -o <owner>            Owner of the repository.
#                         Defaults to "SituDevelopment".
#
#   -r <repository>       Name of the repository.
#                         Defaults to the name of the curent working directory.
#  
#   -d <description>      Description of the repository.
#                         Defaults to the empty string.
#
#   -v <visibility>       Visibility of the repository: "private", "public", or "internal".
#                         Defaults to "private".
#
#   -t <test-directory>   Path of the test directory.
#                         Defaults to "/var/www/test/<repository>".
#
#   -p <prod-directory>   Path of the production directory.
#                         Defaults to "/var/www/prod/<repository>".
#
#   -h                    Display help and exit.
#
#
# Exit codes:
#   0 - success
#   1 - incorrect usage
#   2 - GitHub error
#   3 - git error


# exit codes
SUCCESS=0
INCORRECT_USAGE=1
GITHUB_ERROR=2
GIT_ERROR=3


#######################################
# Display help message.
# Arguments:
#   None
# Outputs:
#   Writes help message to stdout
#######################################
showhelp() {
cat << EOF
Usage: github [-o <owner>] [-r <repository>] [-d <description>] [-v <visibility>]
              [-t <test-directory>] [-p <prod-directory>] [-h]

Creates a new GitHub repository with test and production branches.

Options:
  -o <owner>            Owner of the repository.
                        Defaults to "SituDevelopment".

  -r <repository>       Name of the repository.
                        Defaults to the name of the curent working directory.
  
  -d <description>      Description of the repository.
                        Defaults to the empty string.

  -v <visibility>       Visibility of the repository: "private", "public", or "internal".
                        Defaults to "private".

  -t <test-directory>   Path of the test directory.
                        Defaults to "/var/www/test/<repository>".

  -p <prod-directory>   Path of the production directory.
                        Defaults to "/var/www/prod/<repository>".

  -h                    Display help and exit.
EOF
}


#######################################
# Asserts the given command runs successfully.
# Arguments:
#   $1 - command to run
#   $2 - error message to print on failure
#   $3 - exit code to use on failure
# Outputs:
#   Writes error message to stdout
#######################################
assert_success() {
    eval $1
    if [ $? -ne 0 ]; then
        echo "$2"
        echo -e "\nGoodbye..."
        exit $3
    fi
}


# assign repository and branch variables according to given arguments
while getopts ":o:r:d:v:t:p:h" flag; do
    case "${flag}" in
        o) owner="${OPTARG}" ;;
        r) repo="${OPTARG}" ;;
        d) desc="${OPTARG}" ;;
        v) vis="${OPTARG}" ;;
        t) testp="${OPTARG}" ;;
        p) prodp="${OPTARG}" ;;
        h) showhelp; exit ${SUCCESS} ;;
        ?) showhelp; exit ${INCORRECT_USAGE} ;;
    esac
done

# set default values for unset variables
## creation variables
owner=${owner:="SituDevelopment"}
repo=${repo:=$(basename ${PWD})}
desc=${desc:=""}
vis=${vis:="private"}
testp=${testp:="/var/www/test/${repo}"}
prodp=${prodp:="/var/www/prod/${repo}"}


echo "Creating repository..."
assert_success "gh repo create '${owner}/${repo}' --description '${desc}' --${vis} --template SituDevelopment/template" \
               "Error creating repository" \
               ${GITHUB_ERROR}
echo -e "Repository created\n"


echo "Cloning production branch into '${prodp}'..."
assert_success "git clone --branch 'prod' 'git@github.com:${owner}/${repo}' '${prodp}'" \
               "Error cloning production branch" \
               ${GITHUB_ERROR}
echo -e "Production branch cloned\n"


echo "Marking '${prodp}' as a Git safe directory..."
assert_success "git config --system --add safe.directory '${prodp}'" \
               "Error marking production directory as safe" \
               ${GIT_ERROR}
echo -e "Production directory marked safe\n"


echo "Creating test branch..."
eval "cd '${prodp}'"
assert_success "git branch test" \
               "Error creating test branch" \
               ${GIT_ERROR}
echo -e "Test branch created\n"


echo "Pushing test branch to remote repository..."
assert_success "git push --set-upstream origin test" \
               "Error pushing test branch to remote repository" \
               ${GITHUB_ERROR}
echo -e "Test branch pushed to remote repository\n"


echo "Cloning test branch into '${testp}'..."
assert_success "git clone --branch 'test' 'git@github.com:${owner}/${repo}' '${testp}'" \
               "Error cloning test branch" \
               ${GITHUB_ERROR}
echo -e "Test branch cloned\n"


echo "Marking '${testp}' as a Git safe directory..."
assert_success "git config --system --add safe.directory '${testp}'" \
               "Error marking test directory as safe" \
               ${GITHUB_ERROR}
echo -e "Test directory marked safe\n"


echo "The 'prod' branch of ${owner}/${repo} is not protected."
echo "Go to https://github.com/${owner}/${repo}/settings/branch_protection_rules/new to protect it."
echo "Enter 'prod' as the branch name pattern and check 'Require pull request reviews before merging'."
echo "Then, unchecked 'Require approvals'."


exit ${SUCCESS}
