#!/usr/bin/bash
#
# Warning:
#   This command enables a legacy method of deployment.
#   We should no longer be using test and production branches or deploying from the local server.
#   Please consider whether you can deploy the application more appropriately.
#
# Creates a new GitHub repository with test and production branches and clones
# the branches locally.
#
# See /usr/bin/prod.sh
#
#
# Usage:
#   github [-o <owner>] [-r <repository>] [-d <description>] [-v <visibility>]
#          [-t <test-directory>] [-p <prod-directory>]
#   github -h
#
# Options:
#   -o <owner>            Owner of the repository.
#                         Defaults to "SituDevelopment".
#
#   -r <repository>       Name of the repository.
#                         Defaults to the name of the curent working directory.
#
#   -d <description>      Description of the repository.
#                         Defaults to the empty string.
#
#   -v <visibility>       Visibility of the repository: "private", "public", or "internal".
#                         Defaults to "private".
#
#   -t <test-directory>   Path of the test directory.
#                         Defaults to "/var/www/test/<repository>".
#
#   -p <prod-directory>   Path of the production directory.
#                         Defaults to "/var/www/prod/<repository>".
#
#   -h                    Display help and exit.
#
#
# Exit codes:
#   0 - success
#   1 - incorrect usage
#   2 - GitHub error
#   3 - git error


# exit codes
SUCCESS=0
INCORRECT_USAGE=1
GITHUB_ERROR=2
GIT_ERROR=3


#######################################
# Display help message.
# Arguments:
#   None
# Outputs:
#   Writes help message to stdout
#######################################
showhelp() {
cat << EOF
Usage:
  github [-o <owner>] [-r <repository>] [-d <description>] [-v <visibility>]
         [-t <test-directory>] [-p <prod-directory>]
  github -h

Creates a new GitHub repository with test and production branches.

Options:
  -o <owner>            Owner of the repository.
                        Defaults to "SituDevelopment".

  -r <repository>       Name of the repository.
                        Defaults to the name of the curent working directory.

  -d <description>      Description of the repository.
                        Defaults to the empty string.

  -v <visibility>       Visibility of the repository: "private", "public", or "internal".
                        Defaults to "private".

  -t <test-directory>   Path of the test directory.
                        Defaults to "/var/www/test/<repository>".

  -p <prod-directory>   Path of the production directory.
                        Defaults to "/var/www/prod/<repository>".

  -h                    Display help and exit.
EOF
}


#######################################
# Asserts the given command runs successfully.
# Arguments:
#   $1 - message to print before running command
#   $2 - command to run
#   $3 - error message to print on failure
#   $4 - exit code to use on failure
#   $5 - success message to print on success
# Outputs:
#   Writes error message to stdout
#######################################
assert_success() {
    echo $1
    eval $2
    if [[ $? -ne 0 ]]; then
        echo "$3"
        echo -e "\nGoodbye..."
        exit $4
    fi
    echo -e $5
}


echo -e "\033[0;33mWARNING:
  This command enables a legacy method of deployment.
  We should no longer be using test and production branches or deploying from the local server.
  Please consider whether you can deploy the application more appropriately.\033[0m
"

read -p "Do you wish to continue? (y/n) " -n 1 -r RESULT
if [[ ${RESULT} == "y" ]]; then
    echo -e "\n"
else
    echo -e "\nGoodbye..."
    exit ${SUCCESS}
fi

# assign repository and branch variables according to given arguments
while getopts ":o:r:d:v:t:p:h" flag; do
    case "${flag}" in
        o) owner="${OPTARG}" ;;
        r) repo="${OPTARG}" ;;
        d) desc="${OPTARG}" ;;
        v) vis="${OPTARG}" ;;
        t) testp="${OPTARG}" ;;
        p) prodp="${OPTARG}" ;;
        h) showhelp; exit ${SUCCESS} ;;
        ?) showhelp; exit ${INCORRECT_USAGE} ;;
    esac
done

# set default values for unset variables
owner=${owner:="SituDevelopment"}
repo=${repo:=$(basename ${PWD})}
desc=${desc:=""}
vis=${vis:="private"}
testp=${testp:="/var/www/test/${repo}"}
prodp=${prodp:="/var/www/prod/${repo}"}


assert_success "Creating repository..." \
               "gh repo create '${owner}/${repo}' --description '${desc}' --${vis} --template SituDevelopment/template" \
               "Error creating repository" \
               ${GITHUB_ERROR} \
               "Repository created\n"


assert_success "Adding 'Employees' team as collaborators..." \
               "gh api --method PUT --header 'Accept: application/vnd.github+json' '/orgs/${owner}/teams/employees/repos/${repo}' --field permission=admin" \
               "Error adding 'Employees' team as collaborators" \
               ${GITHUB_ERROR} \
               "'Employees' team added as collaborators\n"


assert_success "Cloning production branch into '${prodp}'..." \
               "git clone --branch 'prod' 'git@github.com:${owner}/${repo}' '${prodp}'" \
               "Error cloning production branch" \
               ${GITHUB_ERROR} \
               "Production branch cloned\n"


eval "cd '${prodp}'"


assert_success "Creating test branch..." \
               "git branch test" \
               "Error creating test branch" \
               ${GIT_ERROR} \
               "Test branch created\n"


assert_success "Pushing test branch to remote repository..." \
               "git push --set-upstream origin test" \
               "Error pushing test branch to remote repository" \
               ${GITHUB_ERROR} \
               "Test branch pushed to remote repository\n"


assert_success "Cloning test branch into '${testp}'..." \
               "git clone --branch 'test' 'git@github.com:${owner}/${repo}' '${testp}'" \
               "Error cloning test branch" \
               ${GITHUB_ERROR} \
               "Test branch cloned\n"


echo "The 'prod' branch of ${owner}/${repo} is not protected."
echo "Go to https://github.com/${owner}/${repo}/settings/branch_protection_rules/new to protect it."
echo "Enter 'prod' as the branch name pattern and check 'Require pull request reviews before merging'."
echo "Then, unchecked 'Require approvals'."


exit ${SUCCESS}
