#!/usr/bin/bash
#
#
# Creates a GitHub pull request with the given properties.
#
# Usage:
#   create-pr <base-branch> <label> [<label> ...]
#   create-pr -h
#
# Arguments:
#   <base-branch>     Name of the branch from which to pull changes.
#
#   <label>           Label to add to the pull request.
#
# Options:
#   -h                Display help and exit.
#
#
# Exit codes:
#   0 - success
#   1 - incorrect usage
#   2 - GitHub error


# exit codes
SUCCESS=0
INCORRECT_USAGE=1
GITHUB_ERROR=2

#######################################
# Display help message.
# Arguments:
#   None
# Outputs:
#   Writes help message to stdout
#######################################
showhelp() {
# Get list of labels for the current repository
labels=$(gh label list --json name -t '{{range .}}{{"\t\t\t - "}}{{.name}}{{"\n"}}{{end}}' 2> /dev/null)
if [ -n "${labels}" ]; then
    labels=$'Available labels:\n'$labels
fi

cat << EOF
Usage:
  create-pr <base-branch> <label> [<label> ...]
  create-pr -h

Creates a GitHub pull request with the given properties.

Arguments:
    <base-branch>   Name of the branch from which to pull changes.

    <label>         Label to add to the pull request.
                    ${labels}

Options:
    -h              Display help and exit.
EOF
}


# assign branch and service variables according to given arguments
while getopts "h" flag; do
    case "${flag}" in
        h) showhelp; exit ${SUCCESS} ;;
        ?) showhelp; exit ${INCORRECT_USAGE} ;;
    esac
done
shift $((OPTIND - 1))

if [ $# -lt 2 ]; then
    showhelp
    exit ${INCORRECT_USAGE}
fi

base="$1"
shift 1

labels="$1"

while [ $# -gt 1 ]; do
    shift 1
    labels="${labels},$1"
done

self="$(cat $HOME/.ghusername)"
reviewers="$(cat $HOME/.ghothers | xargs -I % echo -n ' --reviewer %')"


assert-success "Creating pull request..." \
               "gh pr create --assignee ${self} --base '${base}' --fill --label '${labels}' ${reviewers}" \
               "Error creating pull request" \
               ${GITHUB_ERROR} \
               "Pull request created\n"


assert-success "Enabling auto-merge..." \
               "gh pr merge ${testb} --auto --rebase" \
               "Error enabling auto-merge" \
               ${GITHUB_ERROR} \
               "Auto-merge enabled\n"


echo "Goodbye..."
exit ${SUCCESS}

