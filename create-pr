#!/usr/bin/bash
#
#
# Creates a GitHub pull request with the given properties.
#
# Usage:
#   create-pr [-b <base-branch>] <label> [<label> ...]
#   create-pr -h
#
# Arguments:
#   <label>           Label to add to the pull request.
#
# Options:
#   -b <base-branch>  Name of the branch from which to pull changes.
#                     Defaults to the repository's default branch.
#
#   -h                Display help and exit.
#
#
# Exit codes:
#   0 - success
#   1 - incorrect usage
#   2 - GitHub error


# exit codes
SUCCESS=0
INCORRECT_USAGE=1
GITHUB_ERROR=2

#######################################
# Display help message.
# Arguments:
#   None
# Outputs:
#   Writes help message to stdout
#######################################
showhelp() {
# Get list of labels for the current repository
labels=$(gh label list --json name --template '{{range .}}{{"\t\t\t - "}}{{.name}}{{"\n"}}{{end}}' 2> /dev/null)
if [[ -n "${labels}" ]]; then
    labels=$'Available labels:\n'$labels
fi

cat << EOF
Usage:
  create-pr [-b <base-branch>] <label> [<label> ...]
  create-pr -h

Creates a GitHub pull request with the given properties.

Arguments:
    <label>             Label to add to the pull request.
                        ${labels}

Options:
    -b <base-branch>    Name of the branch from which to pull changes.
                        Defaults to the repository's default branch.

    -h                  Display help and exit.
EOF
}


#######################################
# Asserts the given command runs successfully.
# Arguments:
#   $1 - message to print before running command
#   $2 - command to run
#   $3 - error message to print on failure
#   $4 - exit code to use on failure
#   $5 - success message to print on success
# Outputs:
#   Writes error message to stdout
#######################################
assert_success() {
    echo $1
    eval $2
    if [[ $? -ne 0 ]]; then
        echo "$3"
        echo -e "\nGoodbye..."
        exit $4
    fi
    echo -e $5
}


# assign branch variable according to given argument
while getopts "b: h" flag; do
    case "${flag}" in
        b) base="${OPTARG}" ;;
        h) showhelp; exit ${SUCCESS} ;;
        ?) showhelp; exit ${INCORRECT_USAGE} ;;
    esac
done

shift $((OPTIND - 1))
if [[ $# -lt 1 ]]; then
    showhelp
    exit ${INCORRECT_USAGE}
fi


labels="$1"
while [[ $# -gt 1 ]]; do
    shift 1
    labels="${labels},$1"
done

if [[ -z "${base}" ]]; then
    assert_success "Determining base branch..." \
                   "base=$(gh api /repos/$(git remote get-url origin | sed 's/git@github.com://')/branches?protected=true --jq '.[0].name')" \
                   "Error determining base branch" \
                   ${GITHUB_ERROR} \
                   "Base branch determined\n"
fi


assert_success "Creating pull request..." \
               "gh pr create --assignee @me --base '${base}' --fill --label '${labels}'" \
               "Error creating pull request" \
               ${GITHUB_ERROR} \
               "Pull request created\n"


repo=$(gh repo view --json name --template {{.name}})
number=$(gh pr view --json number --template {{.number}})
assert_success "Requesting review from 'Employees' team..." \
               "gh api --silent --method POST --header 'Accept: application/vnd.github+json' --header 'X-GitHub-Api-Version: 2022-11-28' /repos/SituDevelopment/${repo}/pulls/${number}/requested_reviewers --field team_reviewers[]=employees" \
               "Error requesting review" \
               ${GITHUB_ERROR} \
               "Review requested\n"


assert_success "Enabling auto-merge..." \
               "gh pr merge ${testb} --auto --rebase" \
               "Error enabling auto-merge" \
               ${GITHUB_ERROR} \
               "Auto-merge enabled\n"


echo "Goodbye..."
exit ${SUCCESS}

